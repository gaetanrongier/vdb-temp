#### Exo 1

library(leaflet)
library(ape)

arbre_N_petit <- rtree(10)
plot.phylo(arbre_N_petit)
arbre_N_grand <- rtree(1000)
plot.phylo(arbre_N_grand)
# les label se superpose on ne voit plus l'arbre.

# exo 2

require("leaflet")
m<-leaflet()
m<-addTiles(m,"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png")
m<-addMarkers(m, lng=4.85, lat=45.75, label="Ici Lyon")
m<- addMarkers(m, lng=2.35, lat=48.85, label="Ici Paris")
m

carte_vierge <- function(){
  m <- leaflet()
  m <-addTiles(m,"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png")
  return(m)
}

#exo 3
df <- data.frame(Ville=c("Paris","Lyon"),lng=c(2.35,4.85),lat=c(48.85,45.75))
df
m2 <- carte_vierge(df)
m2 <- addMarkers(m2, lat = ~lat, lng = ~lng, label = ~Ville)
m2

carte_vierge_2 <- function(x){
  m <- leaflet(data = x)
  m <-addTiles(m,"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png")
  return(m)
}
  

#exo 4
carte_vierge_3 <- function(){
  m <- leaflet()
  m <-addTiles(m,"http://lifemap-ncbi.univ-lyon1.fr/osm_tiles/{z}/{x}/{y}.png.")
  return(m)
}
m3 <- carte_vierge_3()
m3

require(jsonlite)
GetCooFromTaxID<-function(taxids) {
  ##taxids is an array that contains taxids.
  ## url cannot be too long, so that we need to cut the taxids (100 max in one chunk)
  ## and make as many requests as necessary.
  taxids<-as.character(taxids) #change to characters.
  DATA<-NULL
  i<-1
  while(i<=length(taxids)) {
    cat(".")
    taxids_sub<-taxids[i:(i+99)]
    taxids_sub<-taxids_sub[!is.na(taxids_sub)]
    taxids_sub<-paste(taxids_sub, collapse="%20") #accepted space separator in url
    url<-paste("http://lifemap-ncbi.univ-lyon1.fr:8080/solr/taxo/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="")
    #do the request :
    data_sub<-fromJSON(url)
    DATA<-rbind(DATA,data_sub$response$docs[,c("taxid","lon","lat", "sci_name","zoom","nbdesc")])
    i<-i+100
  } 
  for (j in 1:ncol(DATA)) DATA[,j]<-unlist(DATA[,j])
  class(DATA$taxid)<-"character"
  return(DATA)
}

##test de la fonction
coord_ex <-GetCooFromTaxID(c(2,9443,2087))
carte_vierge_4 <- function(x){
  m <- leaflet(data = x)
  m <-addTiles(m,"http://lifemap-ncbi.univ-lyon1.fr/osm_tiles/{z}/{x}/{y}.png.")
  return(m)
}
m4 <- carte_vierge_4(coord_ex)
m4 <- addCircleMarkers(m4)
m4



##RÉCUPÉRER LES DONNÉES
EukGenomeInfo<-read.table("ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/eukaryotes.txt", sep="\t", header=T, quote="\"", comment.char="")
## liste unique des taxid
taxids<-unique(EukGenomeInfo$TaxID)

## RÉCUPÉRER LES COORDONNÉES
DF<-GetCooFromTaxID(taxids)

## CALCULER LE NOMBRE DE GÉNOMES SÉQUENCÉS POUR CHAQUE TAXID
nbGenomeSequenced<-table(EukGenomeInfo$TaxID)
## l'ajouter à DF
DF$nbGenomeSequenced<-as.numeric(nbGenomeSequenced[DF$taxid])

##CALCULER LE NB DE GENOMES ENTIEREMENT ASSEMBLES POUR CHAQUE TAXID
##le calcul pour un seul taxid nommé 'tid' serait :
sum(EukGenomeInfo[which(EukGenomeInfo$TaxID=='tid'),]$Status=="Chromosome")
##on peut utiliser la fonction sapply pour le faire pour chaque taxid 
nbGenomeAssembled<-sapply(DF$taxid, function(x,tab) sum(tab[which(tab$TaxID==x),]$Status=="Chromosome"), tab=EukGenomeInfo)
DF$nbGenomeAssembled<-nbGenomeAssembled

##CALCULER LE TAUX de GC MOYEN  
tauxgcmoyen<-sapply(DF$taxid, function(x,tab) mean(as.numeric(as.character(tab[which(tab$TaxID==x),]$GC.)), na.rm=TRUE), tab=EukGenomeInfo)
DF$tauxgcmoyen<-tauxgcmoyen

##CALCULER LA TAILLE MOYENNE DES GÉNOMES EN Mb
SizeGenomeMb<-sapply(DF$taxid, function(x,tab) mean(tab[which(tab$TaxID==x),]$Size..Mb., na.rm=TRUE), tab=EukGenomeInfo)
DF$SizeGenomeMb<-SizeGenomeMb 


# exo  6

m5 <- carte_vierge_4(DF)
m5 <- addCircleMarkers(m5,radius = ~sqrt(SizeGenomeMb),opacity = 0.5,stroke = FALSE, color = "lightblue")
m5

#exo 7

##charger un package contenant des palettes de couleur
library(RColorBrewer) #ou "viridis" qui contient de bonnes couleurs aussi
## créer la fonction de palette
pal<-colorNumeric("Blues",0:100) ##green est une des palettes de RColorBrewer. Taper 
## display.brewer.all() pour les voir toutes
## tester la palette
pal(12) # "#00FF00"
pal(c(12,1,24)) # "#00FF00" "#00FF00" "#00FF00"
pal(101) #impossible ! car 101 est en dehors de l'intervalle possible. 


m6 <- carte_vierge_4(DF)
m6 <- addCircleMarkers(m6,,opacity = 0.5, color = pal(tauxgcmoyen))
m6

#exo 8
